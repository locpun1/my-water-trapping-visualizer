{"ast":null,"code":"var _jsxFileName = \"D:\\\\CongViec\\\\bai-3\\\\src\\\\components\\\\CanvasDisplay.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasDisplay = ({\n  numbers\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const blockSize = 30; // Kích thước của mỗi khối hình vuông\n  const padding = 20; // Khoảng cách giữa canvas và các khối\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const canvasWidth = numbers.length * blockSize + 2 * padding;\n    const maxNumber = Math.max(...numbers, 0); // Thêm 0 để tránh lỗi nếu mảng rỗng\n    const canvasHeight = maxNumber * blockSize + 2 * padding;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight); // Xóa canvas\n\n    // Hàm tính lượng nước (logic chính)\n    const calculateWater = heights => {\n      const n = heights.length;\n      const waterLevels = new Array(n).fill(0);\n      if (n === 0) return waterLevels; // Xử lý trường hợp mảng rỗng\n\n      let leftMax = new Array(n).fill(0);\n      let rightMax = new Array(n).fill(0);\n      leftMax[0] = heights[0];\n      for (let i = 1; i < n; i++) {\n        leftMax[i] = Math.max(heights[i], leftMax[i - 1]);\n      }\n      rightMax[n - 1] = heights[n - 1];\n      for (let i = n - 2; i >= 0; i--) {\n        rightMax[i] = Math.max(heights[i], rightMax[i + 1]);\n      }\n      for (let i = 0; i < n; i++) {\n        const minBoundary = Math.min(leftMax[i], rightMax[i]);\n        waterLevels[i] = Math.max(0, minBoundary - heights[i]);\n      }\n      return waterLevels;\n    };\n\n    // Vẽ các cột hình khối\n    for (let i = 0; i < numbers.length; i++) {\n      const height = numbers[i];\n      const x = i * blockSize + padding;\n      const y = canvasHeight - height * blockSize - padding;\n      ctx.fillStyle = 'black'; // Màu của khối\n      ctx.fillRect(x, y, blockSize, height * blockSize);\n    }\n\n    // Tính và vẽ nước (màu xanh lam)\n    let water = calculateWater(numbers);\n    let totalWater = 0; // Tính tổng lượng nước\n    for (let i = 0; i < numbers.length; i++) {\n      const waterHeight = water[i];\n      totalWater += waterHeight;\n      if (waterHeight > 0) {\n        const x = i * blockSize + padding;\n        const y = canvasHeight - (numbers[i] + waterHeight) * blockSize - padding;\n        ctx.fillStyle = 'lightblue'; // Màu của nước\n        ctx.fillRect(x, y, blockSize, waterHeight * blockSize);\n      }\n    }\n\n    // Vẽ đường viền xung quanh canvas\n    ctx.strokeStyle = 'black';\n    ctx.strokeRect(0, 0, canvasWidth, canvasHeight);\n  }, [numbers, blockSize, padding]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n};\n_s(CanvasDisplay, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CanvasDisplay;\nexport default CanvasDisplay;\nvar _c;\n$RefreshReg$(_c, \"CanvasDisplay\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","CanvasDisplay","numbers","_s","canvasRef","blockSize","padding","canvas","current","ctx","getContext","canvasWidth","length","maxNumber","Math","max","canvasHeight","width","height","clearRect","calculateWater","heights","n","waterLevels","Array","fill","leftMax","rightMax","i","minBoundary","min","x","y","fillStyle","fillRect","water","totalWater","waterHeight","strokeStyle","strokeRect","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CongViec/bai-3/src/components/CanvasDisplay.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\ninterface CanvasDisplayProps {\r\n    numbers: number[];\r\n}\r\n\r\nconst CanvasDisplay: React.FC<CanvasDisplayProps> = ({ numbers }) => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const blockSize = 30; // Kích thước của mỗi khối hình vuông\r\n    const padding = 20; // Khoảng cách giữa canvas và các khối\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        const canvasWidth = numbers.length * blockSize + 2 * padding;\r\n        const maxNumber = Math.max(...numbers, 0); // Thêm 0 để tránh lỗi nếu mảng rỗng\r\n        const canvasHeight = maxNumber * blockSize + 2 * padding;\r\n\r\n        canvas.width = canvasWidth;\r\n        canvas.height = canvasHeight;\r\n\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight); // Xóa canvas\r\n\r\n        // Hàm tính lượng nước (logic chính)\r\n        const calculateWater = (heights: number[]): number[] => {\r\n            const n = heights.length;\r\n            const waterLevels = new Array(n).fill(0);\r\n            if (n === 0) return waterLevels; // Xử lý trường hợp mảng rỗng\r\n\r\n            let leftMax = new Array(n).fill(0);\r\n            let rightMax = new Array(n).fill(0);\r\n\r\n            leftMax[0] = heights[0];\r\n            for (let i = 1; i < n; i++) {\r\n                leftMax[i] = Math.max(heights[i], leftMax[i - 1]);\r\n            }\r\n\r\n            rightMax[n - 1] = heights[n - 1];\r\n            for (let i = n - 2; i >= 0; i--) {\r\n                rightMax[i] = Math.max(heights[i], rightMax[i + 1]);\r\n            }\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                const minBoundary = Math.min(leftMax[i], rightMax[i]);\r\n                waterLevels[i] = Math.max(0, minBoundary - heights[i]);\r\n            }\r\n\r\n            return waterLevels;\r\n        };\r\n\r\n        // Vẽ các cột hình khối\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const height = numbers[i];\r\n            const x = i * blockSize + padding;\r\n            const y = canvasHeight - height * blockSize - padding;\r\n\r\n            ctx.fillStyle = 'black'; // Màu của khối\r\n            ctx.fillRect(x, y, blockSize, height * blockSize);\r\n        }\r\n\r\n        // Tính và vẽ nước (màu xanh lam)\r\n        let water = calculateWater(numbers);\r\n        let totalWater = 0; // Tính tổng lượng nước\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const waterHeight = water[i];\r\n            totalWater += waterHeight;\r\n            if (waterHeight > 0) {\r\n                const x = i * blockSize + padding;\r\n                const y = canvasHeight - (numbers[i] + waterHeight) * blockSize - padding;\r\n\r\n                ctx.fillStyle = 'lightblue'; // Màu của nước\r\n                ctx.fillRect(x, y, blockSize, waterHeight * blockSize);\r\n            }\r\n        }\r\n\r\n        // Vẽ đường viền xung quanh canvas\r\n        ctx.strokeStyle = 'black';\r\n        ctx.strokeRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    }, [numbers, blockSize, padding]);\r\n\r\n    return <canvas ref={canvasRef} style={{ border: '1px solid black' }} />;\r\n};\r\n\r\nexport default CanvasDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}